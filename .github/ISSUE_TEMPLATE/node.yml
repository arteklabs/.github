name: node
description: "elon-2 gh-issue"
assignees: "diogobaltazar"
projects: ["projects/2"]
body:
  - type: textarea
    id: about
    attributes:
      label: About
    validations:
      required: true

  - type: textarea
    id: value
    attributes:
      label: Value
      placeholder: The value that the node is providing overall
    validations:
      required: true

  - type: textarea
    id: neighbours
    attributes:
      label: Neighbours
      placeholder: List the neighbour nodes by `gh-issue-id`
    validations:
      required: false

  - type: textarea
    id: ac
    attributes:
      label: Acceptance Criteria
      placeholder: acceptance checklist
    validations:
      required: true

  - type: checkboxes
    id: dor
    attributes:
      label: Definition of Ready
      options:
        - label: (AC1) clear-acceptance-criteria
        - label: (AC2) business-value
        - label: (AC3) no-dependencies
        - label: (AC4) no-blockers
        - label: (AC5) feasibility-assessed
        - label: (AC6) resource-availability
        - label: (AC7) prioritization
        - label: (AC8) small-enough
        - label: (AC9) clarity
    validations:
      required: true

  - type: checkboxes
    id: dod
    attributes:
      label: Definition of done
      options:
        - label: (DOD1) code-complete
          required: true
        - label: (DOD2) code-reviewed
          required: true
        - label: (DOD3) unit-tests
          required: true
        - label: (DOD4) integration-tests
          required: true
        - label: (DOD5) functional-tests
          required: true
        - label: (DOD6) docs
          required: true
        - label: (DOD7) known-bugs
          required: true
        - label: (DOD8) sandbox-deploy
          required: true
    validations:
      required: true

  - type: markdown
    id: readme
    attributes:
      value: |
        # README

        Read below on how to complete the information for this node 

        ## Neighbouring nodes
        
        Add from suffixes:

        - `[dep]`: the neighbour is a dependency
        - `[parent]`: the neighbour is a parent
        - `[child]`: the node is a child

        ## Acceptance Criteria

        Define the criteria (checklist) that must be met for the task to be considered `Done`. The criteria must be `specific`, `measurable`, `achievable`, `relevant`, and `time-bound` (SMART).

        ## Defition of Ready

        - `clear-acceptance-criteria`: The user task must have specific acceptance criteria that define the boundary of the taskâ€™s requirements and how they will be verified.
        - `business-value`: The task must deliver a clear value to the user or customer.
        - `no-dependencies`: Any dependencies on other stories or external factors have been identified and resolved or have a clear plan for resolution.
        - `no-blockers`: There are no blockers that prevent the task from being worked on.
        - `feasibility-assessed`: The technical feasibility has been assessed, and any significant architectural concerns have been addressed.
        - `resource-availability`: The necessary resources (personnel, environments, tools, etc.) are available to work on the task.
        - `prioritization`: The task is prioritized in the backlog and scheduled for an upcoming sprint.
        - `small-enough`: The task is small enough to be completed in one sprint, adhering to the team's past velocity and capacity.
        - `clarity`: The team has a clear understanding of what is expected and there is no ambiguity in the task.

        ## Definition of Done

        - `code-complete` The code for the user task is fully written and checked into the version control system.
        - `code-reviewd` The code has been reviewed by another team member, and any necessary changes have been made.
        - `unit-tests` Unit tests have been written for the new code, and all tests are passing.
        - `integration-tests` The code integrates correctly with the existing system, and any integration tests are passing.
        - `functional-tests` The user task has been tested against its acceptance criteria, and it meets the expected functionality.
        - `docs` Any necessary documentation has been updated or completed. This could include inline code comments, external technical documentation, or end-user documentation.
        - `known-bugs` The task does not have any known bugs or if it does, they have been properly captured in a separate issue, if not fixed;
        - `sandbox-deploy` The code has been deployed to a staging environment that closely resembles production.
  
